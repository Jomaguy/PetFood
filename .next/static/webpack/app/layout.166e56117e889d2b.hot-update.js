"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/utils/storageUtils.ts":
/*!***********************************!*\
  !*** ./src/utils/storageUtils.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanupOldBackups: () => (/* binding */ cleanupOldBackups),\n/* harmony export */   cleanupStorage: () => (/* binding */ cleanupStorage),\n/* harmony export */   createBackup: () => (/* binding */ createBackup),\n/* harmony export */   downloadExportedData: () => (/* binding */ downloadExportedData),\n/* harmony export */   exportData: () => (/* binding */ exportData),\n/* harmony export */   getStorageStats: () => (/* binding */ getStorageStats),\n/* harmony export */   getStorageUsage: () => (/* binding */ getStorageUsage),\n/* harmony export */   importData: () => (/* binding */ importData),\n/* harmony export */   importDataFromFile: () => (/* binding */ importDataFromFile),\n/* harmony export */   importDataWithStrategy: () => (/* binding */ importDataWithStrategy),\n/* harmony export */   isStorageAvailable: () => (/* binding */ isStorageAvailable),\n/* harmony export */   isStorageNearlyFull: () => (/* binding */ isStorageNearlyFull),\n/* harmony export */   loadDogProfiles: () => (/* binding */ loadDogProfiles),\n/* harmony export */   loadFromStorage: () => (/* binding */ loadFromStorage),\n/* harmony export */   loadRecommendations: () => (/* binding */ loadRecommendations),\n/* harmony export */   restoreFromBackup: () => (/* binding */ restoreFromBackup),\n/* harmony export */   saveDogProfiles: () => (/* binding */ saveDogProfiles),\n/* harmony export */   saveRecommendations: () => (/* binding */ saveRecommendations),\n/* harmony export */   saveToStorage: () => (/* binding */ saveToStorage)\n/* harmony export */ });\n/* harmony import */ var _types_storageSchema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/storageSchema */ \"(app-pages-browser)/./src/types/storageSchema.ts\");\n/* harmony import */ var _errorHandling__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errorHandling */ \"(app-pages-browser)/./src/utils/errorHandling.ts\");\n\n\n// Add this right after the imports\n// Extend StorageErrorType with a new error type for cleanup operations\n// We'll use UNKNOWN_ERROR as a fallback if CLEANUP_ERROR is not available\nconst CLEANUP_ERROR = _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageErrorType.UNKNOWN_ERROR;\n/**\n * Check if local storage is available\n * @returns true if available, false otherwise\n */ function isStorageAvailable() {\n    try {\n        const testKey = '__storage_test__';\n        localStorage.setItem(testKey, 'test');\n        const result = localStorage.getItem(testKey) === 'test';\n        localStorage.removeItem(testKey);\n        return result;\n    } catch (e) {\n        return false;\n    }\n}\n/**\n * Get the estimated local storage space usage in bytes\n * @returns Object containing used space and available space (if possible to determine)\n */ function getStorageUsage() {\n    const { result, error } = (0,_errorHandling__WEBPACK_IMPORTED_MODULE_1__.tryCatchStorage)(()=>{\n        let totalSize = 0;\n        // Estimate space used by iterating through all keys\n        for(let i = 0; i < localStorage.length; i++){\n            const key = localStorage.key(i);\n            if (key) {\n                const value = localStorage.getItem(key) || '';\n                totalSize += key.length + value.length;\n            }\n        }\n        // Convert to bytes (approximate as 2 bytes per character in UTF-16)\n        const usedBytes = totalSize * 2;\n        // Local storage limit is typically 5MB, but this varies by browser\n        const estimatedLimit = 5 * 1024 * 1024;\n        return {\n            used: usedBytes,\n            available: estimatedLimit - usedBytes,\n            percentUsed: usedBytes / estimatedLimit * 100\n        };\n    }, 'getStorageUsage');\n    if (error) {\n        return {\n            used: 0\n        };\n    }\n    return result || {\n        used: 0\n    };\n}\n/**\n * Check if storage is nearly full (over specified threshold)\n * @param thresholdPercent Percentage threshold (default: 80%)\n * @returns true if storage usage is over threshold\n */ function isStorageNearlyFull() {\n    let thresholdPercent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 80;\n    const usage = getStorageUsage();\n    return !!usage.percentUsed && usage.percentUsed > thresholdPercent;\n}\n/**\n * Save data to local storage with versioning\n * @param key Storage key\n * @param data Data to save\n * @throws StorageError if storage is not available or saving fails\n */ function saveToStorage(key, data) {\n    if (!isStorageAvailable()) {\n        throw new _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageError('Local storage is not available', _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageErrorType.STORAGE_UNAVAILABLE);\n    }\n    // Check if storage is nearly full\n    if (isStorageNearlyFull()) {\n        console.warn('Local storage is nearly full. Consider cleaning up old data.');\n    }\n    try {\n        // Create versioned data container\n        const storageData = {\n            version: _types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.SCHEMA_VERSION,\n            updatedAt: Date.now(),\n            data\n        };\n        // Serialize and save\n        localStorage.setItem(key, JSON.stringify(storageData));\n    } catch (error) {\n        // Determine if this is a quota error\n        if (error instanceof Error && error.name === 'QuotaExceededError') {\n            throw new _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageError('Storage quota exceeded', _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageErrorType.STORAGE_QUOTA_EXCEEDED, {\n                originalError: error\n            });\n        }\n        throw (0,_errorHandling__WEBPACK_IMPORTED_MODULE_1__.handleStorageError)(error, \"saveToStorage(\".concat(key, \")\"), _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageErrorType.WRITE_ERROR);\n    }\n}\n/**\n * Load data from local storage with version checking\n * @param key Storage key\n * @param defaultValue Default value if not found or invalid\n * @returns The stored data or default value\n */ function loadFromStorage(key, defaultValue) {\n    if (!isStorageAvailable()) {\n        console.warn('Local storage is not available');\n        return defaultValue;\n    }\n    const { result, error } = (0,_errorHandling__WEBPACK_IMPORTED_MODULE_1__.tryCatchStorage)(()=>{\n        // Get serialized data\n        const serialized = localStorage.getItem(key);\n        if (!serialized) {\n            return defaultValue;\n        }\n        // Parse serialized data\n        const parsedData = JSON.parse(serialized);\n        // Version check\n        if (parsedData.version !== _types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.SCHEMA_VERSION) {\n            console.warn(\"Storage schema version mismatch for \".concat(key, \". Expected \").concat(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.SCHEMA_VERSION, \", got \").concat(parsedData.version));\n            // Here we would add migration logic for different versions\n            // For now just return default\n            return defaultValue;\n        }\n        return parsedData;\n    }, \"loadFromStorage(\".concat(key, \")\"));\n    if (error) {\n        // Attempt to recover from backup on error\n        const backupResult = tryRestoreItemFromBackup(key);\n        if (backupResult.success && backupResult.data) {\n            try {\n                const parsedBackup = JSON.parse(backupResult.data);\n                return parsedBackup;\n            } catch (e) {\n                // If backup parsing fails, return default\n                return defaultValue;\n            }\n        }\n        return defaultValue;\n    }\n    return result || defaultValue;\n}\n/**\n * Try to restore a single item from its backup\n * @param key The key of the item to restore\n * @returns Success status and data if successful\n */ function tryRestoreItemFromBackup(key) {\n    try {\n        // Find backups for this specific key\n        const backupKey = \"\".concat(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.BACKUP_PREFIX).concat(key);\n        const backupData = localStorage.getItem(backupKey);\n        if (backupData) {\n            // Restore from backup\n            localStorage.setItem(key, backupData);\n            return {\n                success: true,\n                data: backupData\n            };\n        }\n        return {\n            success: false,\n            data: null\n        };\n    } catch (e) {\n        return {\n            success: false,\n            data: null\n        };\n    }\n}\n/**\n * Create a backup of all application data\n * @returns true if backup successful, false otherwise\n */ function createBackup() {\n    const { result, error } = (0,_errorHandling__WEBPACK_IMPORTED_MODULE_1__.tryCatchStorage)(()=>{\n        if (!isStorageAvailable()) {\n            throw new _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageError('Local storage is not available, cannot create backup', _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageErrorType.STORAGE_UNAVAILABLE);\n        }\n        const timestamp = Date.now();\n        const backupKey = \"\".concat(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.BACKUP_PREFIX).concat(timestamp);\n        // Create a backup object with all app data\n        const backup = {\n            timestamp,\n            version: _types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.SCHEMA_VERSION,\n            dogProfiles: localStorage.getItem(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.DOG_PROFILES),\n            savedRecommendations: localStorage.getItem(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.SAVED_RECOMMENDATIONS),\n            userPreferences: localStorage.getItem(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.USER_PREFERENCES)\n        };\n        localStorage.setItem(backupKey, JSON.stringify(backup));\n        // Also create individual backups of each key\n        if (backup.dogProfiles) {\n            localStorage.setItem(\"\".concat(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.BACKUP_PREFIX).concat(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.DOG_PROFILES), backup.dogProfiles);\n        }\n        if (backup.savedRecommendations) {\n            localStorage.setItem(\"\".concat(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.BACKUP_PREFIX).concat(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.SAVED_RECOMMENDATIONS), backup.savedRecommendations);\n        }\n        if (backup.userPreferences) {\n            localStorage.setItem(\"\".concat(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.BACKUP_PREFIX).concat(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.USER_PREFERENCES), backup.userPreferences);\n        }\n        return true;\n    }, 'createBackup', _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageErrorType.BACKUP_ERROR);\n    return result === true;\n}\n/**\n * Restore data from the most recent backup\n * @returns true if restore successful, false otherwise\n */ function restoreFromBackup() {\n    const { result, error } = (0,_errorHandling__WEBPACK_IMPORTED_MODULE_1__.tryCatchStorage)(()=>{\n        if (!isStorageAvailable()) {\n            throw new _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageError('Local storage is not available, cannot restore backup', _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageErrorType.STORAGE_UNAVAILABLE);\n        }\n        // Find the latest backup\n        let latestBackupKey = null;\n        let latestTimestamp = 0;\n        for(let i = 0; i < localStorage.length; i++){\n            const key = localStorage.key(i);\n            if (key && key.startsWith(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.BACKUP_PREFIX) && !key.includes(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.DOG_PROFILES) && !key.includes(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.SAVED_RECOMMENDATIONS) && !key.includes(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.USER_PREFERENCES)) {\n                try {\n                    const timestamp = parseInt(key.replace(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.BACKUP_PREFIX, ''), 10);\n                    if (!isNaN(timestamp) && timestamp > latestTimestamp) {\n                        latestTimestamp = timestamp;\n                        latestBackupKey = key;\n                    }\n                } catch (e) {\n                    continue;\n                }\n            }\n        }\n        if (!latestBackupKey) {\n            throw new _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageError('No backup found', _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageErrorType.RESTORE_ERROR);\n        }\n        // Restore from backup\n        const serializedBackup = localStorage.getItem(latestBackupKey);\n        if (!serializedBackup) {\n            throw new _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageError('Backup is empty or corrupted', _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageErrorType.RESTORE_ERROR);\n        }\n        const backup = JSON.parse(serializedBackup);\n        if (backup.dogProfiles) {\n            localStorage.setItem(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.DOG_PROFILES, backup.dogProfiles);\n        }\n        if (backup.savedRecommendations) {\n            localStorage.setItem(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.SAVED_RECOMMENDATIONS, backup.savedRecommendations);\n        }\n        if (backup.userPreferences) {\n            localStorage.setItem(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.USER_PREFERENCES, backup.userPreferences);\n        }\n        return true;\n    }, 'restoreFromBackup', _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageErrorType.RESTORE_ERROR);\n    return result === true;\n}\n/**\n * Remove old backups, keeping only the most recent ones\n * @param keepCount Number of recent backups to keep (default: 3)\n * @returns number of backups removed\n */ function cleanupOldBackups() {\n    let keepCount = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 3;\n    const { result, error } = (0,_errorHandling__WEBPACK_IMPORTED_MODULE_1__.tryCatchStorage)(()=>{\n        if (!isStorageAvailable()) {\n            return 0;\n        }\n        // Find all backups and their timestamps\n        const backups = [];\n        for(let i = 0; i < localStorage.length; i++){\n            const key = localStorage.key(i);\n            if (key && key.startsWith(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.BACKUP_PREFIX) && !key.includes(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.DOG_PROFILES) && !key.includes(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.SAVED_RECOMMENDATIONS) && !key.includes(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.USER_PREFERENCES)) {\n                try {\n                    const timestamp = parseInt(key.replace(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.BACKUP_PREFIX, ''), 10);\n                    if (!isNaN(timestamp)) {\n                        backups.push({\n                            key,\n                            timestamp\n                        });\n                    }\n                } catch (e) {\n                    continue;\n                }\n            }\n        }\n        // Sort by timestamp (newest first)\n        backups.sort((a, b)=>b.timestamp - a.timestamp);\n        // Remove old backups keeping the most recent ones\n        let removedCount = 0;\n        if (backups.length > keepCount) {\n            const toRemove = backups.slice(keepCount);\n            toRemove.forEach((backup)=>{\n                localStorage.removeItem(backup.key);\n                removedCount++;\n            });\n        }\n        return removedCount;\n    }, 'cleanupOldBackups');\n    return result || 0;\n}\n/**\n * Save dog profiles to storage\n * @param profiles Map of dog profiles by ID\n * @param activeProfileId ID of the active profile (optional)\n */ function saveDogProfiles(profiles, activeProfileId) {\n    const data = {\n        profiles,\n        activeProfileId\n    };\n    saveToStorage(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.DOG_PROFILES, data);\n}\n/**\n * Load dog profiles from storage\n * @returns The stored dog profiles or default empty data\n */ function loadDogProfiles() {\n    return loadFromStorage(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.DOG_PROFILES, _types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_DOG_PROFILES_STORAGE);\n}\n/**\n * Save saved recommendations to storage\n * @param recommendations Map of saved recommendations by product ID\n */ function saveRecommendations(recommendations) {\n    const { result, error } = (0,_errorHandling__WEBPACK_IMPORTED_MODULE_1__.tryCatchStorage)(()=>{\n        const savedDates = {};\n        // Update timestamps for any new recommendations\n        Object.keys(recommendations).forEach((id)=>{\n            // Use existing timestamp if available, otherwise use current time\n            savedDates[id] = Date.now();\n        });\n        const data = {\n            recommendations,\n            savedDates\n        };\n        saveToStorage(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.SAVED_RECOMMENDATIONS, data);\n    }, 'saveRecommendations');\n    if (error) {\n        throw error;\n    }\n}\n/**\n * Load saved recommendations from storage\n * @returns The stored recommendations or default empty data\n */ function loadRecommendations() {\n    return loadFromStorage(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.SAVED_RECOMMENDATIONS, _types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_SAVED_RECOMMENDATIONS_STORAGE);\n}\n/**\n * Export all user data to a downloadable JSON file\n * @returns JSON string of all user data\n */ function exportData() {\n    const { result, error } = (0,_errorHandling__WEBPACK_IMPORTED_MODULE_1__.tryCatchStorage)(()=>{\n        const dogProfiles = loadDogProfiles();\n        const savedRecommendations = loadRecommendations();\n        const userPreferences = loadFromStorage(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.USER_PREFERENCES, _types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_USER_PREFERENCES_STORAGE);\n        const exportData = {\n            schemaVersion: _types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.SCHEMA_VERSION,\n            exportDate: new Date().toISOString(),\n            dogProfiles,\n            savedRecommendations,\n            userPreferences\n        };\n        return JSON.stringify(exportData, null, 2);\n    }, 'exportData', _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageErrorType.EXPORT_ERROR);\n    if (error) {\n        throw error;\n    }\n    return result || '{}';\n}\n/**\n * Import user data from a JSON string\n * @param jsonData JSON string with user data\n * @returns true if import successful, false otherwise\n */ function importData(jsonData) {\n    return importDataWithStrategy(jsonData, 'replace');\n}\n/**\n * Cleanup old or unused data from storage based on age threshold\n * @param olderThanDays Number of days after which data is considered old (default: 90)\n * @returns Object with counts of items cleaned up by category\n */ function cleanupStorage() {\n    let olderThanDays = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 90;\n    const { result, error } = (0,_errorHandling__WEBPACK_IMPORTED_MODULE_1__.tryCatchStorage)(()=>{\n        var _savedRecommendations_data, _savedRecommendations_data1;\n        if (!isStorageAvailable()) {\n            return {\n                recommendations: 0,\n                oldBackups: 0,\n                total: 0\n            };\n        }\n        const now = Date.now();\n        const ageThreshold = now - olderThanDays * 24 * 60 * 60 * 1000; // Convert days to milliseconds\n        let removedRecommendations = 0;\n        // Clean up old saved recommendations\n        const savedRecommendations = loadRecommendations();\n        if ((savedRecommendations === null || savedRecommendations === void 0 ? void 0 : (_savedRecommendations_data = savedRecommendations.data) === null || _savedRecommendations_data === void 0 ? void 0 : _savedRecommendations_data.recommendations) && (savedRecommendations === null || savedRecommendations === void 0 ? void 0 : (_savedRecommendations_data1 = savedRecommendations.data) === null || _savedRecommendations_data1 === void 0 ? void 0 : _savedRecommendations_data1.savedDates)) {\n            const { recommendations, savedDates } = savedRecommendations.data;\n            const updatedRecommendations = {};\n            const updatedSavedDates = {};\n            Object.entries(recommendations).forEach((param)=>{\n                let [id, recommendation] = param;\n                const savedDate = savedDates[id] || 0;\n                // Keep recommendations newer than the threshold\n                if (savedDate > ageThreshold) {\n                    updatedRecommendations[id] = recommendation;\n                    updatedSavedDates[id] = savedDate;\n                } else {\n                    removedRecommendations++;\n                }\n            });\n            // Only save if we removed any recommendations\n            if (removedRecommendations > 0) {\n                saveToStorage(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.SAVED_RECOMMENDATIONS, {\n                    recommendations: updatedRecommendations,\n                    savedDates: updatedSavedDates\n                });\n            }\n        }\n        // Clean up old backups\n        const oldBackups = cleanupOldBackups(3); // Keep 3 most recent backups\n        const totalRemoved = removedRecommendations + oldBackups;\n        return {\n            recommendations: removedRecommendations,\n            oldBackups,\n            total: totalRemoved\n        };\n    }, 'cleanupStorage', CLEANUP_ERROR);\n    return result || {\n        recommendations: 0,\n        oldBackups: 0,\n        total: 0\n    };\n}\n/**\n * Download exported data as a JSON file\n * @param filename Custom filename (default: 'petfood-data-export.json')\n * @returns true if download initiated successfully, false otherwise\n */ function downloadExportedData() {\n    let filename = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 'petfood-data-export.json';\n    const { result, error } = (0,_errorHandling__WEBPACK_IMPORTED_MODULE_1__.tryCatchStorage)(()=>{\n        const exportString = exportData();\n        // Create a Blob with the data\n        const blob = new Blob([\n            exportString\n        ], {\n            type: 'application/json'\n        });\n        const url = URL.createObjectURL(blob);\n        // Create a temporary link and trigger download\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = filename;\n        document.body.appendChild(link);\n        link.click();\n        // Clean up\n        setTimeout(()=>{\n            URL.revokeObjectURL(url);\n            document.body.removeChild(link);\n        }, 100);\n        return true;\n    }, 'downloadExportedData', _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageErrorType.EXPORT_ERROR);\n    return result === true;\n}\n/**\n * Import data from an uploaded file\n * @param file The uploaded File object\n * @param mergeStrategy How to handle existing data ('replace', 'merge', 'keep-newer')\n * @returns Promise resolving to true if import successful, false otherwise\n */ async function importDataFromFile(file) {\n    let mergeStrategy = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'replace';\n    return new Promise((resolve)=>{\n        const reader = new FileReader();\n        reader.onload = (event)=>{\n            try {\n                var _event_target;\n                const jsonData = (_event_target = event.target) === null || _event_target === void 0 ? void 0 : _event_target.result;\n                const success = importDataWithStrategy(jsonData, mergeStrategy);\n                resolve(success);\n            } catch (error) {\n                console.error('Error importing data from file:', error);\n                resolve(false);\n            }\n        };\n        reader.onerror = ()=>{\n            console.error('Error reading file');\n            resolve(false);\n        };\n        reader.readAsText(file);\n    });\n}\n/**\n * Import data with the specified merge strategy\n * @param jsonData JSON string with user data\n * @param mergeStrategy How to handle existing data ('replace', 'merge', 'keep-newer')\n * @returns true if import successful, false otherwise\n */ function importDataWithStrategy(jsonData) {\n    let mergeStrategy = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'replace';\n    const { result, error } = (0,_errorHandling__WEBPACK_IMPORTED_MODULE_1__.tryCatchStorage)(()=>{\n        var _importedData_dogProfiles_data, _importedData_dogProfiles, _importedData_savedRecommendations_data, _importedData_savedRecommendations, _importedData_userPreferences;\n        const importedData = JSON.parse(jsonData);\n        // Validate imported data\n        if (!importedData.schemaVersion || !importedData.exportDate) {\n            throw new _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageError('Invalid export data format', _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageErrorType.IMPORT_ERROR);\n        }\n        // Create backup before making any changes\n        createBackup();\n        // Handle dog profiles based on merge strategy\n        if ((_importedData_dogProfiles = importedData.dogProfiles) === null || _importedData_dogProfiles === void 0 ? void 0 : (_importedData_dogProfiles_data = _importedData_dogProfiles.data) === null || _importedData_dogProfiles_data === void 0 ? void 0 : _importedData_dogProfiles_data.profiles) {\n            if (mergeStrategy === 'replace') {\n                // Simply replace existing data\n                saveToStorage(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.DOG_PROFILES, importedData.dogProfiles.data);\n            } else {\n                var _existingProfiles_data;\n                // Merge or keep-newer strategies\n                const existingProfiles = loadDogProfiles();\n                if (existingProfiles === null || existingProfiles === void 0 ? void 0 : (_existingProfiles_data = existingProfiles.data) === null || _existingProfiles_data === void 0 ? void 0 : _existingProfiles_data.profiles) {\n                    const mergedProfiles = {\n                        ...existingProfiles.data\n                    };\n                    // Process each imported profile\n                    Object.entries(importedData.dogProfiles.data.profiles).forEach((param)=>{\n                        let [id, profile] = param;\n                        const existingProfile = mergedProfiles.profiles[id];\n                        if (!existingProfile) {\n                            // Profile doesn't exist in current data, add it\n                            mergedProfiles.profiles[id] = profile;\n                        } else if (mergeStrategy === 'keep-newer') {\n                            // Compare update timestamps and keep newer\n                            const importedTimestamp = importedData.dogProfiles.updatedAt || 0;\n                            const existingTimestamp = existingProfiles.updatedAt || 0;\n                            if (importedTimestamp > existingTimestamp) {\n                                mergedProfiles.profiles[id] = profile;\n                            }\n                        } else {\n                            // For 'merge' strategy, always update\n                            mergedProfiles.profiles[id] = profile;\n                        }\n                    });\n                    // Save merged profiles\n                    saveToStorage(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.DOG_PROFILES, mergedProfiles);\n                } else {\n                    // No existing profiles, just import\n                    saveToStorage(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.DOG_PROFILES, importedData.dogProfiles.data);\n                }\n            }\n        }\n        // Handle recommendations with similar merge strategy\n        if ((_importedData_savedRecommendations = importedData.savedRecommendations) === null || _importedData_savedRecommendations === void 0 ? void 0 : (_importedData_savedRecommendations_data = _importedData_savedRecommendations.data) === null || _importedData_savedRecommendations_data === void 0 ? void 0 : _importedData_savedRecommendations_data.recommendations) {\n            if (mergeStrategy === 'replace') {\n                saveToStorage(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.SAVED_RECOMMENDATIONS, importedData.savedRecommendations.data);\n            } else {\n                var _existingRecommendations_data;\n                const existingRecommendations = loadRecommendations();\n                if (existingRecommendations === null || existingRecommendations === void 0 ? void 0 : (_existingRecommendations_data = existingRecommendations.data) === null || _existingRecommendations_data === void 0 ? void 0 : _existingRecommendations_data.recommendations) {\n                    const mergedRecommendations = {\n                        recommendations: {\n                            ...existingRecommendations.data.recommendations\n                        },\n                        savedDates: {\n                            ...existingRecommendations.data.savedDates\n                        }\n                    };\n                    // Process each imported recommendation\n                    Object.entries(importedData.savedRecommendations.data.recommendations).forEach((param)=>{\n                        let [id, recommendation] = param;\n                        var _importedData_savedRecommendations_data_savedDates;\n                        const existingRecommendation = mergedRecommendations.recommendations[id];\n                        const importedSavedDate = ((_importedData_savedRecommendations_data_savedDates = importedData.savedRecommendations.data.savedDates) === null || _importedData_savedRecommendations_data_savedDates === void 0 ? void 0 : _importedData_savedRecommendations_data_savedDates[id]) || 0;\n                        const existingSavedDate = mergedRecommendations.savedDates[id] || 0;\n                        if (!existingRecommendation) {\n                            // Recommendation doesn't exist, add it\n                            mergedRecommendations.recommendations[id] = recommendation;\n                            mergedRecommendations.savedDates[id] = importedSavedDate;\n                        } else if (mergeStrategy === 'keep-newer' && importedSavedDate > existingSavedDate) {\n                            // 'keep-newer' strategy - update if imported is newer\n                            mergedRecommendations.recommendations[id] = recommendation;\n                            mergedRecommendations.savedDates[id] = importedSavedDate;\n                        } else if (mergeStrategy === 'merge') {\n                            // 'merge' strategy - always update\n                            mergedRecommendations.recommendations[id] = recommendation;\n                            mergedRecommendations.savedDates[id] = importedSavedDate;\n                        }\n                    });\n                    // Save merged recommendations\n                    saveToStorage(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.SAVED_RECOMMENDATIONS, mergedRecommendations);\n                } else {\n                    // No existing recommendations, just import\n                    saveToStorage(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.SAVED_RECOMMENDATIONS, importedData.savedRecommendations.data);\n                }\n            }\n        }\n        // Handle user preferences\n        if ((_importedData_userPreferences = importedData.userPreferences) === null || _importedData_userPreferences === void 0 ? void 0 : _importedData_userPreferences.data) {\n            if (mergeStrategy === 'replace') {\n                saveToStorage(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.USER_PREFERENCES, importedData.userPreferences.data);\n            } else {\n                const existingPreferences = loadFromStorage(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.USER_PREFERENCES, _types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_USER_PREFERENCES_STORAGE);\n                if (existingPreferences === null || existingPreferences === void 0 ? void 0 : existingPreferences.data) {\n                    if (mergeStrategy === 'keep-newer') {\n                        const importedTimestamp = importedData.userPreferences.updatedAt || 0;\n                        const existingTimestamp = existingPreferences.updatedAt || 0;\n                        if (importedTimestamp > existingTimestamp) {\n                            saveToStorage(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.USER_PREFERENCES, importedData.userPreferences.data);\n                        }\n                    } else {\n                        // For 'merge' strategy, merge objects\n                        const mergedPreferences = {\n                            ...existingPreferences.data,\n                            ...importedData.userPreferences.data\n                        };\n                        saveToStorage(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.USER_PREFERENCES, mergedPreferences);\n                    }\n                } else {\n                    // No existing preferences, just import\n                    saveToStorage(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.USER_PREFERENCES, importedData.userPreferences.data);\n                }\n            }\n        }\n        return true;\n    }, 'importDataWithStrategy', _errorHandling__WEBPACK_IMPORTED_MODULE_1__.StorageErrorType.IMPORT_ERROR);\n    return result === true;\n}\n/**\n * Get statistics about storage usage and item counts\n * @returns Object with storage usage statistics\n */ function getStorageStats() {\n    const { result, error } = (0,_errorHandling__WEBPACK_IMPORTED_MODULE_1__.tryCatchStorage)(()=>{\n        var _dogProfiles_data, _savedRecommendations_data;\n        // Get storage usage\n        const usage = getStorageUsage();\n        // Count items\n        const dogProfiles = loadDogProfiles();\n        const savedRecommendations = loadRecommendations();\n        // Count backups\n        let backupCount = 0;\n        for(let i = 0; i < localStorage.length; i++){\n            const key = localStorage.key(i);\n            if (key && key.startsWith(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.BACKUP_PREFIX) && !key.includes(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.DOG_PROFILES) && !key.includes(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.SAVED_RECOMMENDATIONS) && !key.includes(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.USER_PREFERENCES)) {\n                backupCount++;\n            }\n        }\n        // Get profile and recommendation counts\n        const profileCount = (dogProfiles === null || dogProfiles === void 0 ? void 0 : (_dogProfiles_data = dogProfiles.data) === null || _dogProfiles_data === void 0 ? void 0 : _dogProfiles_data.profiles) ? Object.keys(dogProfiles.data.profiles).length : 0;\n        const recommendationCount = (savedRecommendations === null || savedRecommendations === void 0 ? void 0 : (_savedRecommendations_data = savedRecommendations.data) === null || _savedRecommendations_data === void 0 ? void 0 : _savedRecommendations_data.recommendations) ? Object.keys(savedRecommendations.data.recommendations).length : 0;\n        return {\n            usage,\n            counts: {\n                dogProfiles: profileCount,\n                savedRecommendations: recommendationCount,\n                backups: backupCount\n            },\n            lastUpdated: {\n                dogProfiles: dogProfiles === null || dogProfiles === void 0 ? void 0 : dogProfiles.updatedAt,\n                savedRecommendations: savedRecommendations === null || savedRecommendations === void 0 ? void 0 : savedRecommendations.updatedAt,\n                backups: getLatestBackupTimestamp()\n            }\n        };\n    }, 'getStorageStats');\n    return result || {\n        usage: {\n            used: 0\n        },\n        counts: {\n            dogProfiles: 0,\n            savedRecommendations: 0,\n            backups: 0\n        },\n        lastUpdated: {}\n    };\n}\n/**\n * Get the timestamp of the most recent backup\n * @returns Timestamp of the most recent backup, or undefined if none exists\n */ function getLatestBackupTimestamp() {\n    const { result } = (0,_errorHandling__WEBPACK_IMPORTED_MODULE_1__.tryCatchStorage)(()=>{\n        let latestTimestamp;\n        for(let i = 0; i < localStorage.length; i++){\n            const key = localStorage.key(i);\n            if (key && key.startsWith(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.BACKUP_PREFIX) && !key.includes(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.DOG_PROFILES) && !key.includes(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.SAVED_RECOMMENDATIONS) && !key.includes(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.USER_PREFERENCES)) {\n                try {\n                    const timestamp = parseInt(key.replace(_types_storageSchema__WEBPACK_IMPORTED_MODULE_0__.StorageKey.BACKUP_PREFIX, ''), 10);\n                    if (!isNaN(timestamp) && (!latestTimestamp || timestamp > latestTimestamp)) {\n                        latestTimestamp = timestamp;\n                    }\n                } catch (e) {\n                    continue;\n                }\n            }\n        }\n        return latestTimestamp;\n    }, 'getLatestBackupTimestamp');\n    return result || undefined;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/storageUtils.ts\n"));

/***/ })

});